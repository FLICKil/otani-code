/*
 * This file is generated by jOOQ.
 */
package my.groupId.jooq;


import my.groupId.jooq.tables.Admin;
import my.groupId.jooq.tables.Author;
import my.groupId.jooq.tables.Book;
import my.groupId.jooq.tables.Category;
import my.groupId.jooq.tables.FlywaySchemaHistory;
import my.groupId.jooq.tables.Publisher;
import my.groupId.jooq.tables.Rent;
import my.groupId.jooq.tables.Setting;
import my.groupId.jooq.tables.Users;
import my.groupId.jooq.tables.records.AdminRecord;
import my.groupId.jooq.tables.records.AuthorRecord;
import my.groupId.jooq.tables.records.BookRecord;
import my.groupId.jooq.tables.records.CategoryRecord;
import my.groupId.jooq.tables.records.FlywaySchemaHistoryRecord;
import my.groupId.jooq.tables.records.PublisherRecord;
import my.groupId.jooq.tables.records.RentRecord;
import my.groupId.jooq.tables.records.SettingRecord;
import my.groupId.jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * library.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdminRecord> KEY_ADMIN_ID = Internal.createUniqueKey(Admin.ADMIN, DSL.name("KEY_admin_id"), new TableField[] { Admin.ADMIN.ID }, true);
    public static final UniqueKey<AdminRecord> KEY_ADMIN_PRIMARY = Internal.createUniqueKey(Admin.ADMIN, DSL.name("KEY_admin_PRIMARY"), new TableField[] { Admin.ADMIN.ID }, true);
    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_ID = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_id"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_ID = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_id"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_PRIMARY"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<CategoryRecord> KEY_CATEGORY_ID = Internal.createUniqueKey(Category.CATEGORY, DSL.name("KEY_category_id"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("KEY_category_PRIMARY"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> KEY_FLYWAY_SCHEMA_HISTORY_PRIMARY = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("KEY_flyway_schema_history_PRIMARY"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<PublisherRecord> KEY_PUBLISHER_ID = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("KEY_publisher_id"), new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final UniqueKey<PublisherRecord> KEY_PUBLISHER_PRIMARY = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("KEY_publisher_PRIMARY"), new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final UniqueKey<RentRecord> KEY_RENT_ID = Internal.createUniqueKey(Rent.RENT, DSL.name("KEY_rent_id"), new TableField[] { Rent.RENT.ID }, true);
    public static final UniqueKey<RentRecord> KEY_RENT_PRIMARY = Internal.createUniqueKey(Rent.RENT, DSL.name("KEY_rent_PRIMARY"), new TableField[] { Rent.RENT.ID }, true);
    public static final UniqueKey<SettingRecord> KEY_SETTING_ID = Internal.createUniqueKey(Setting.SETTING, DSL.name("KEY_setting_id"), new TableField[] { Setting.SETTING.ID }, true);
    public static final UniqueKey<SettingRecord> KEY_SETTING_PRIMARY = Internal.createUniqueKey(Setting.SETTING, DSL.name("KEY_setting_PRIMARY"), new TableField[] { Setting.SETTING.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_UC_USERS = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_UC_users"), new TableField[] { Users.USERS.ID, Users.USERS.EMAIL }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, AuthorRecord> BOOK_IBFK_1 = Internal.createForeignKey(Book.BOOK, DSL.name("book_ibfk_1"), new TableField[] { Book.BOOK.AUTHORID }, Keys.KEY_AUTHOR_PRIMARY, new TableField[] { Author.AUTHOR.ID }, true);
    public static final ForeignKey<BookRecord, CategoryRecord> BOOK_IBFK_2 = Internal.createForeignKey(Book.BOOK, DSL.name("book_ibfk_2"), new TableField[] { Book.BOOK.CATEGORYID }, Keys.KEY_CATEGORY_PRIMARY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<BookRecord, PublisherRecord> BOOK_IBFK_3 = Internal.createForeignKey(Book.BOOK, DSL.name("book_ibfk_3"), new TableField[] { Book.BOOK.PUBLISHERID }, Keys.KEY_PUBLISHER_PRIMARY, new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final ForeignKey<RentRecord, BookRecord> RENT_IBFK_1 = Internal.createForeignKey(Rent.RENT, DSL.name("rent_ibfk_1"), new TableField[] { Rent.RENT.BOOKID }, Keys.KEY_BOOK_PRIMARY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<RentRecord, UsersRecord> RENT_IBFK_2 = Internal.createForeignKey(Rent.RENT, DSL.name("rent_ibfk_2"), new TableField[] { Rent.RENT.USERID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
}
