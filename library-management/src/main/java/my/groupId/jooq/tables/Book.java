/*
 * This file is generated by jOOQ.
 */
package my.groupId.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import my.groupId.jooq.Indexes;
import my.groupId.jooq.Keys;
import my.groupId.jooq.Library;
import my.groupId.jooq.tables.records.BookRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library.book</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>library.book.id</code>.
     */
    public final TableField<BookRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>library.book.title</code>.
     */
    public final TableField<BookRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>library.book.authorId</code>.
     */
    public final TableField<BookRecord, Long> AUTHORID = createField(DSL.name("authorId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>library.book.categoryId</code>.
     */
    public final TableField<BookRecord, Long> CATEGORYID = createField(DSL.name("categoryId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>library.book.publisherId</code>.
     */
    public final TableField<BookRecord, Long> PUBLISHERID = createField(DSL.name("publisherId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>library.book.amount</code>.
     */
    public final TableField<BookRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>library.book.createdAt</code>.
     */
    public final TableField<BookRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>library.book.updatedAt</code>.
     */
    public final TableField<BookRecord, LocalDateTime> UPDATEDAT = createField(DSL.name("updatedAt"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>library.book.createdBy</code>.
     */
    public final TableField<BookRecord, Long> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>library.book.updatedBy</code>.
     */
    public final TableField<BookRecord, Long> UPDATEDBY = createField(DSL.name("updatedBy"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>library.book.coverImg</code>.
     */
    public final TableField<BookRecord, byte[]> COVERIMG = createField(DSL.name("coverImg"), SQLDataType.BLOB, this, "");

    private Book(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library.book</code> table reference
     */
    public Book(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>library.book</code> table reference
     */
    public Book(Name alias) {
        this(alias, BOOK);
    }

    /**
     * Create a <code>library.book</code> table reference
     */
    public Book() {
        this(DSL.name("book"), null);
    }

    public <O extends Record> Book(Table<O> child, ForeignKey<O, BookRecord> key) {
        super(child, key, BOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Library.LIBRARY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BOOK_AUTHORID, Indexes.BOOK_CATEGORYID, Indexes.BOOK_PUBLISHERID);
    }

    @Override
    public Identity<BookRecord, Long> getIdentity() {
        return (Identity<BookRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BOOK_ID);
    }

    @Override
    public List<ForeignKey<BookRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOK_IBFK_1, Keys.BOOK_IBFK_2, Keys.BOOK_IBFK_3);
    }

    private transient Author _author;
    private transient Category _category;
    private transient Publisher _publisher;

    public Author author() {
        if (_author == null)
            _author = new Author(this, Keys.BOOK_IBFK_1);

        return _author;
    }

    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.BOOK_IBFK_2);

        return _category;
    }

    public Publisher publisher() {
        if (_publisher == null)
            _publisher = new Publisher(this, Keys.BOOK_IBFK_3);

        return _publisher;
    }

    @Override
    public Book as(String alias) {
        return new Book(DSL.name(alias), this);
    }

    @Override
    public Book as(Name alias) {
        return new Book(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(String name) {
        return new Book(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(Name name) {
        return new Book(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, Long, Long, Long, Integer, LocalDateTime, LocalDateTime, Long, Long, byte[]> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
