/*
 * This file is generated by jOOQ.
 */
package my.groupId.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import my.groupId.jooq.Keys;
import my.groupId.jooq.Library;
import my.groupId.jooq.tables.records.AdminRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Admin extends TableImpl<AdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library.admin</code>
     */
    public static final Admin ADMIN = new Admin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRecord> getRecordType() {
        return AdminRecord.class;
    }

    /**
     * The column <code>library.admin.id</code>.
     */
    public final TableField<AdminRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>library.admin.name</code>.
     */
    public final TableField<AdminRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>library.admin.password</code>.
     */
    public final TableField<AdminRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>library.admin.createdAt</code>.
     */
    public final TableField<AdminRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>library.admin.updatedAt</code>.
     */
    public final TableField<AdminRecord, LocalDateTime> UPDATEDAT = createField(DSL.name("updatedAt"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>library.admin.createdBy</code>.
     */
    public final TableField<AdminRecord, Long> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>library.admin.updatedBy</code>.
     */
    public final TableField<AdminRecord, Long> UPDATEDBY = createField(DSL.name("updatedBy"), SQLDataType.BIGINT, this, "");

    private Admin(Name alias, Table<AdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admin(Name alias, Table<AdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library.admin</code> table reference
     */
    public Admin(String alias) {
        this(DSL.name(alias), ADMIN);
    }

    /**
     * Create an aliased <code>library.admin</code> table reference
     */
    public Admin(Name alias) {
        this(alias, ADMIN);
    }

    /**
     * Create a <code>library.admin</code> table reference
     */
    public Admin() {
        this(DSL.name("admin"), null);
    }

    public <O extends Record> Admin(Table<O> child, ForeignKey<O, AdminRecord> key) {
        super(child, key, ADMIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Library.LIBRARY;
    }

    @Override
    public Identity<AdminRecord, Long> getIdentity() {
        return (Identity<AdminRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdminRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<AdminRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ADMIN_ID);
    }

    @Override
    public Admin as(String alias) {
        return new Admin(DSL.name(alias), this);
    }

    @Override
    public Admin as(Name alias) {
        return new Admin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(String name) {
        return new Admin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(Name name) {
        return new Admin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
