/*
 * This file is generated by jOOQ.
 */
package my.groupId.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import my.groupId.jooq.Indexes;
import my.groupId.jooq.Keys;
import my.groupId.jooq.Library;
import my.groupId.jooq.tables.records.RentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rent extends TableImpl<RentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library.rent</code>
     */
    public static final Rent RENT = new Rent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentRecord> getRecordType() {
        return RentRecord.class;
    }

    /**
     * The column <code>library.rent.id</code>.
     */
    public final TableField<RentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>library.rent.bookId</code>.
     */
    public final TableField<RentRecord, Long> BOOKID = createField(DSL.name("bookId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>library.rent.userId</code>.
     */
    public final TableField<RentRecord, Long> USERID = createField(DSL.name("userId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>library.rent.startDate</code>.
     */
    public final TableField<RentRecord, LocalDate> STARTDATE = createField(DSL.name("startDate"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>library.rent.endDate</code>.
     */
    public final TableField<RentRecord, LocalDate> ENDDATE = createField(DSL.name("endDate"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>library.rent.createdAt</code>.
     */
    public final TableField<RentRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>library.rent.updatedAt</code>.
     */
    public final TableField<RentRecord, LocalDateTime> UPDATEDAT = createField(DSL.name("updatedAt"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>library.rent.createdBy</code>.
     */
    public final TableField<RentRecord, Long> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>library.rent.updatedBy</code>.
     */
    public final TableField<RentRecord, Long> UPDATEDBY = createField(DSL.name("updatedBy"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>library.rent.fines</code>.
     */
    public final TableField<RentRecord, BigDecimal> FINES = createField(DSL.name("fines"), SQLDataType.DECIMAL(4, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    private Rent(Name alias, Table<RentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rent(Name alias, Table<RentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library.rent</code> table reference
     */
    public Rent(String alias) {
        this(DSL.name(alias), RENT);
    }

    /**
     * Create an aliased <code>library.rent</code> table reference
     */
    public Rent(Name alias) {
        this(alias, RENT);
    }

    /**
     * Create a <code>library.rent</code> table reference
     */
    public Rent() {
        this(DSL.name("rent"), null);
    }

    public <O extends Record> Rent(Table<O> child, ForeignKey<O, RentRecord> key) {
        super(child, key, RENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Library.LIBRARY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.RENT_BOOKID, Indexes.RENT_USERID);
    }

    @Override
    public Identity<RentRecord, Long> getIdentity() {
        return (Identity<RentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RentRecord> getPrimaryKey() {
        return Keys.KEY_RENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<RentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_RENT_ID);
    }

    @Override
    public List<ForeignKey<RentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENT_IBFK_1, Keys.RENT_IBFK_2);
    }

    private transient Book _book;
    private transient Users _users;

    public Book book() {
        if (_book == null)
            _book = new Book(this, Keys.RENT_IBFK_1);

        return _book;
    }

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.RENT_IBFK_2);

        return _users;
    }

    @Override
    public Rent as(String alias) {
        return new Rent(DSL.name(alias), this);
    }

    @Override
    public Rent as(Name alias) {
        return new Rent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rent rename(String name) {
        return new Rent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rent rename(Name name) {
        return new Rent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, LocalDate, LocalDate, LocalDateTime, LocalDateTime, Long, Long, BigDecimal> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
